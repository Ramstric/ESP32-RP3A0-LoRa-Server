---
import "../styles/global.css";

import Layout from "../layouts/Layout.astro";
import Button from "../components/Button.astro";
---

<Layout>
    <div class="sort">
        <p>ordenar por:</p>
        <div class="options">
            <Button text="fecha" id="sort-date" active />
            <Button text="temperatura" id="sort-temperature" />
        </div>
    </div>

    <div class="filter">
        <p>filtrar nodos:</p>
        <div class="options">
            <Button text="1" id="filter-node-1" active />
            <Button text="2" id="filter-node-2" active />
        </div>
    </div>

	<div class="temperature-scale">
		<p>Escala de temperatura</p>
		<div id="temperature-samples"></div>
	</div>

    <div class="database">
        <table class="data-table">
            <thead>
                <tr>
                    <th class="col-id">ID</th>
                    <th class="col-fecha">Fecha</th>
                    <th class="col-hora">Hora</th>
                    <th class="col-temperatura">Temperatura</th>
                    <th class="col-r">R</th>
                    <th class="col-g">G</th>
                    <th class="col-b">B</th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
    </div>
</Layout>

<style>
    .sort, .filter {
		position: sticky;
		top: 0;
		z-index: 100;
        flex-direction: row;
        justify-content: flex-start;

        gap: 75px;

        padding: 5px 100px;

        color: var(--white);
        background-color: var(--black);
    }

	.filter {box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);}

    .sort p, .filter p {width: fit-content;}

    .options {
        flex-direction: row;

        width: fit-content;

        gap: 125px;
    }

	.temperature-scale {
		flex-direction: row;
		margin-top: 10px;
		gap: 20px;

		* {width: fit-content;}
	}

	#temperature-samples {flex-direction: row;}

    .database {padding: 10px 100px;}

    .data-table {
		table-layout: fixed;

        width: 100%;
		min-width: 900px;

        border-collapse: collapse;
		color: var(--black);
        background-color: var(--white);
    }

    .data-table th {
        padding: 12px 5px;

		font-weight: 600;
    }

    .data-table td {
        padding: 5px 5px;

        text-align: center;
    }

    .col-id {width: 16% !important;}
    .col-fecha {width: 20% !important;}
    .col-hora {width: 20% !important;}
    .col-temperatura {width: 20% !important;}

    .col-r, .col-g, .col-b { width: 8% !important; }

	@media (max-width: 1150px) {
		.database{
			padding: 10px 15px;
			overflow-x: scroll;
			width: 100%;
		}

		.data-table {
			margin: auto !important;
			white-space: nowrap;
		}

	}
	
	@media (max-width: 830px) {
		.sort, .filter {
        gap: 15px;
        padding: 5px 20px;
    	}

		.options {
        gap: 20px;
    	}

		.temperature-scale{gap: 10px;}
	}
</style>

<script>
	import data from '../data.json' with { type: 'json' };

	const temperatureColorScale = ["#37537C","#26436F","#254f77","#2b5b79","#27678a","#287593","#438190","#648c89","#879a84","#aaa97d","#c2ab77","#c19d61","#c38a53","#be704c","#af4d4c","#9f294c","#87203e","#6e1531","#560c25","#3d0216"];
	const temperatureSamples = document.getElementById('temperature-samples');

	if (temperatureSamples) {
		temperatureColorScale.forEach(color => {
			const colorDiv = document.createElement('div');
			colorDiv.style.backgroundColor = color;
			colorDiv.style.width = window.matchMedia('(max-width: 830px)').matches ? '7.5px' : '35px';
			colorDiv.style.height = '20px';
			colorDiv.style.display = 'inline-block';
			temperatureSamples.appendChild(colorDiv);
		});
	}

	let currentSort = 'fecha';
	let currentOrder = 'DESC';
	let currentNodes = '1,2';

	function updateTable(data: {id: number, fecha: string, hora: string, temperatura: number, r: number, g: number, b: number}[]) {
		const tbody = document.querySelector('.data-table tbody');
		if (!tbody) return;
		
		tbody.innerHTML = '';
		
		data.forEach(row => {
			const tr = document.createElement('tr');
			tr.style.textAlign = 'center';
			
			const rgbValue = `rgb(${row.r}, ${row.g}, ${row.b})`;
			const temperatureColor = temperatureColorScale[Math.floor(Math.abs(row.temperatura/2.5 - 1))]

			tr.innerHTML = `
				<td>${row.id}</td>
				<td>${row.fecha}</td>
				<td>${row.hora}</td>
				<td style="background-color: ${temperatureColor}">${row.temperatura}</td>
				<td style="background-color: ${rgbValue}">${row.r}</td>
				<td style="background-color: ${rgbValue}">${row.g}</td>
				<td style="background-color: ${rgbValue}">${row.b}</td>
			`;
			
			tbody.appendChild(tr);
		});
	}

	async function fetchDatabaseData() {
		
		const sampleData = data as [{id: number, fecha: string, hora: string, temperatura: number, r: number, g: number, b: number}];
		let filteredData = sampleData.filter(row => {
			const nodes = currentNodes.split(',').map(n => parseInt(n)).filter((n) => !isNaN(n));
			return nodes.includes(row.id);
		});

		if (currentSort === 'fecha') {
			filteredData.sort((a, b) => {
				const dateA = new Date(`${a.fecha} ${a.hora}`);
				const dateB = new Date(`${b.fecha} ${b.hora}`);
				return currentOrder === 'DESC' ? dateB.getTime() - dateA.getTime() : dateA.getTime() - dateB.getTime();
			});
		} else if (currentSort === 'temperatura') {
			filteredData.sort((a, b) => {
				return currentOrder === 'DESC' ? b.temperatura - a.temperatura : a.temperatura - b.temperatura;
			});
		}

		updateTable(filteredData);
	}

	function updateActiveButton(activeId: string) {
		document.querySelectorAll(`[id^="sort-"]`).forEach(btn => {
			btn.classList.remove('active');
		});

		document.getElementById(activeId)?.classList.add('active');
	}

	function toggleNodeFilter(nodeId: number, button: EventTarget | null) {
		if (!button || !(button instanceof HTMLElement)) return;
		
		const nodes = currentNodes.split(',').map(n => parseInt(n)).filter((n) => !isNaN(n));
		const index = nodes.indexOf(nodeId);

		if (index > -1) {
			nodes.splice(index, 1);
			button.classList.remove('active');
		} else {
			nodes.push(nodeId);
			button.classList.add('active');
		}
		
		currentNodes = nodes.join(',');
		fetchDatabaseData();
	}

	function setupSortButtons() {
		document.getElementById('sort-date')?.addEventListener('click', () => {
			currentSort = 'fecha';
			updateActiveButton('sort-date');
			fetchDatabaseData();
		});
		
		
		document.getElementById('sort-temperature')?.addEventListener('click', () => {
			currentSort = 'temperatura';
			updateActiveButton('sort-temperature');
			fetchDatabaseData();
		});
	}

	function setupFilterButtons() {
		document.getElementById('filter-node-1')?.addEventListener('click', (e) => {
			toggleNodeFilter(1, e.target);
		});
		
		document.getElementById('filter-node-2')?.addEventListener('click', (e) => {
			toggleNodeFilter(2, e.target);
		});
	}

	// Initialize when page loads
	document.addEventListener('DOMContentLoaded', () => {
		setupSortButtons();
		setupFilterButtons();
		
		// Initial fetch
		fetchDatabaseData();
		
		// Set up interval to fetch every 500 milliseconds
		const fetchInterval = setInterval(fetchDatabaseData, 500);

		window.addEventListener('beforeunload', () => {
			if (fetchInterval) { clearInterval(fetchInterval); }
		});

	});

</script>