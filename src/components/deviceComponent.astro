---
import PlotlyChart from './plotlyChart.astro';

const { deviceId, deviceType = "ESP32" } = Astro.props;
const uniqueDeviceId = `device-${deviceId}`;
const temperatureChartId = `temperature-${uniqueDeviceId}`;
const colorChartId = `color-${uniqueDeviceId}`;
---

<div class="device-container" id={uniqueDeviceId}>
    <div class="connection-overlay" id={`overlay-${uniqueDeviceId}`}>
        <div class="connection-content">
            <div class="connection-icon">
                <img src="/ESP32-RP3A0-LoRa-Server/img/lora/motherboard.png" alt="Device" />
                <div class="pulse-ring"></div>
            </div>
            <div class="connection-text">
                <h2>Conectando dispositivo...</h2>
                <p><span class="device-type">{deviceType}</span> dispositivo conectado a la red</p>
                <p>ID del nodo: <span class="device-id">{deviceId}</span></p>
            </div>
        </div>
    </div>

    <div class="device-main-content" id={`content-${uniqueDeviceId}`}>
        <div class="identifier">
            <img src="/ESP32-RP3A0-LoRa-Server/img/lora/motherboard.png" id="device-logo" alt="Motherboard" />
            <h2>Dispositivo <b>{deviceType}</b> - Nodo <b>{deviceId}</b></h2>
        </div>
        <div class="plots">
            <div class="temperature">
                <div class="plot">
                    <div class="plot-header">
                        <div class="recent-data">
                            <div style="flex-direction: row;">
                                <img src="/ESP32-RP3A0-LoRa-Server/img/lora/temperature.png" alt="Temperature Icon" />
                                <h3 id="current-temperature"></h3>
                            </div>
                            <p>Temperatura actual</p>
                        </div>
                        <div class="recent-data">
                            <div style="flex-direction: row;">
                                <h3>LM35</h3>
                            </div>
                            <p>Sensor de temperatura</p>
                        </div>
                    </div>
                    <PlotlyChart
                        chartId={temperatureChartId}
                        yAxisTitle="<b>Temperatura (°C)</b>"
                        lineColor="#ffece7"
                        typeData="temperature"
                    />
                </div>
            </div>
            <div class="color">
                <div class="plot">
                    <div class="plot-header">
                        <div class="recent-data">
                            <div style="flex-direction: row;">
                                <img src="/ESP32-RP3A0-LoRa-Server/img/lora/color-palette.png" alt="Color Palette Icon" />
                                <h3 id="current-color"></h3>
                            </div>
                            <p>Color actual</p>
                        </div>
                        <div class="recent-data">
                            <div style="flex-direction: row;">
                                <h3>TCS34275</h3>
                            </div>
                            <p>Módulo de reconocimiento de color</p>
                        </div>
                    </div>
                    <PlotlyChart
                        chartId={colorChartId}
                        yAxisTitle="<b>Valor RGB</b>"
                        lineColor="#ffece7"
                        typeData="color"
                    />
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .device-container {
        position: relative;
        justify-content: flex-start;
        height: 675px;
        gap: 25px;
        padding: 25px 50px 5px 50px;
        background-color: var(--white);
        overflow: hidden;
    }

    /* Connection Animation Styles */
    .connection-overlay {
        position: absolute;
        width: 90%;
        height: 90%;
        background: linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%);
        border-radius: 20px;
        align-items: center;
        justify-content: center;
        z-index: 10;
        opacity: 1;
        transition: opacity 0.3s ease-out;
    }

    .connection-overlay.fade-out {
        opacity: 0;
        pointer-events: none;
    }

    .connection-content {
        text-align: center;
        color: var(--white);
        animation: slideInUp 0.3s ease-out;
    }

    .connection-icon {
        position: relative;
        display: inline-block;
        margin-bottom: 30px;
    }

    .connection-icon img {
        width: 80px;
        height: 80px;
        filter: brightness(1.2);
        animation: devicePulse 1s infinite;
    }

    .pulse-ring {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 120px;
        height: 120px;
        border: 2px solid #ffece7;
        border-radius: 50%;
        opacity: 0;
        animation: pulseRing 1s infinite;
    }

    .connection-text h2 {
        font-size: 28px;
        margin-bottom: 15px;
        color: #ffece7;
        font-weight: 600;
    }

    .connection-text p {
        font-size: 18px;
        margin: 8px 0;
        color: #cccccc;
    }

    .device-type {
        color: #ffece7;
        font-weight: bold;
        text-transform: uppercase;
    }

    .device-id {
        color: #ffece7;
        font-weight: bold;
        font-size: 20px;
    }


    /* Main Content Styles */
    .device-main-content {
        opacity: 0;
        transform: translateY(20px);
        transition: all 0.3s ease-out;
    }

    .device-main-content.show {
        opacity: 1;
        transform: translateY(0);
    }

    .identifier {
        flex-direction: row;
        justify-content: flex-start;
        gap: 10px;
    }

    #device-logo {
        width: 50px;
    }

    .plots {
        flex-direction: row;
        gap: 100px;
        text-align: center;
    }

    .temperature,
    .color {
        width: fit-content;
        gap: 10px;
    }

    .plot {
        width: 610px;
        height: 450px;
        color: var(--white);
        background-color: #1d1d1d;
        filter: drop-shadow(0 0 10px rgba(0, 0, 0, 0.5));
        padding: 10px;
        border-radius: 10px;
    }

    .plot-header {
        flex-direction: row;
        justify-content: space-between;
    }
    
    .recent-data {
        :first-child {gap: 10px;}

        > :nth-child(2) {
            font-size: 12px;
            color: var(--light-gray);
        }

        img {
            width: 35px;
            height: 35px;
        }

        h3 {
            padding: 2.5px;
            border-radius: 5px;
        }
    }

    .recent-data * {
        width: fit-content;
    }

    /* Animations */
    @keyframes slideInUp {
        from {
            opacity: 0;
            transform: translateY(40px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @keyframes devicePulse {
        0%, 100% {
            transform: scale(1);
        }
        50% {
            transform: scale(1.05);
        }
    }

    @keyframes pulseRing {
        0% {
            opacity: 0;
            transform: translate(-50%, -50%) scale(0.8);
        }
        50% {
            opacity: 0.6;
            transform: translate(-50%, -50%) scale(1);
        }
        100% {
            opacity: 0;
            transform: translate(-50%, -50%) scale(1.2);
        }
    }

    /* Responsive Styles */
    @media (max-width: 1360px) {
        
        .device-container {
            height: fit-content;
            padding: 15px 25px 25px 25px;
        }

        .plots {
            flex-direction: column;
            gap: 25px;
        }

        .plot {
            width: 100%;
            height: 375px;
        }

        .color, .temperature {
            width: 100%;
        }

        
    }

</style>

<script define:vars={{ temperatureChartId, colorChartId, uniqueDeviceId }}>
    const temperatureColorScale = ["#37537C","#26436F","#254f77","#2b5b79","#27678a","#287593","#438190","#648c89","#879a84","#aaa97d","#c2ab77","#c19d61","#c38a53","#be704c","#af4d4c","#9f294c","#87203e","#6e1531","#560c25","#3d0216"];

    const currentTemperatureElement = document.getElementById('current-temperature');
    const currentColorElement = document.getElementById('current-color');
    
    document.addEventListener('DOMContentLoaded', () => {
        // Connection animation sequence
        const overlay = document.getElementById(`overlay-${uniqueDeviceId}`);
        const mainContent = document.getElementById(`content-${uniqueDeviceId}`);
        
        // Start the connection sequence
        setTimeout(() => {
            // Fade out overlay and show main content
            overlay.classList.add('fade-out');
            mainContent.classList.add('show');
            
            // Remove overlay from DOM after transition
            setTimeout(() => {
                overlay.style.display = 'none';
            }, 500);
        }, 2000); // Show connection animation for 2 seconds

        // Data update intervals (start after connection animation)
        setTimeout(() => {
            const tempInterval = setInterval(() => {
                try {
                    if (window[`getData_${temperatureChartId.replaceAll('-', '_')}`]) {
                        const data = window[`getData_${temperatureChartId.replaceAll('-', '_')}`]();
                        currentTemperatureElement.textContent = `${data.y || 0} °C`;

                        const temperatureColor = temperatureColorScale[Math.floor(Math.abs(data.y/2.5 - 1))]
                        currentTemperatureElement.style.backgroundColor = temperatureColor;
                    }
                } catch (error) {
                    console.error('Error updating temperature:', error);
                }
            }, 1000);

            const colorInterval = setInterval(() => {
                try {
                    if (window[`getData_${colorChartId.replaceAll('-', '_')}`]) {
                        const data = window[`getData_${colorChartId.replaceAll('-', '_')}`]();
                        // RGB to hex conversion
                        const hexColor = `#${data.y.r.toString(16).padStart(2, '0')}${data.y.g.toString(16).padStart(2, '0')}${data.y.b.toString(16).padStart(2, '0')}`;
                        currentColorElement.textContent = `${hexColor.toUpperCase()}`;
                        currentColorElement.style.backgroundColor = hexColor;
                    }
                } catch (error) {
                    console.error('Error updating color:', error);
                }
            }, 1000);
        }, 2000); // Start data updates after connection animation completes
    });
</script>