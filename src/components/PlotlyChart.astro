---
import "../styles/global.css";

export interface Props {
	chartId: string;
	yAxisTitle?: string;
	lineColor?: string;
	typeData?: 'temperature' | 'color';
}

const {
	chartId,
	yAxisTitle = 'Valor',
	lineColor = '#ffece7',
	typeData = 'temperature',
} = Astro.props;

const uniqueId = chartId;
---

<div id={uniqueId} class="plotly-chart"></div>


<style>
	.plotly-chart {
		width: 100%;
        height: 100%;
	}
</style>

<script define:vars={{ uniqueId, yAxisTitle, lineColor, typeData }} >
	document.addEventListener('DOMContentLoaded', function() {
		import('/js/plotly.min.js').then(() => {
			const chartContainer = document.getElementById(uniqueId)			

			const layout = {
				xaxis: {
					title: '<b>Tiempo</b>',
					range: [0, 6],
					color: '#ffece7',
					gridcolor: '#444',
					tickfont: { color: '#ffece7', family: 'Manrope' }
				},
				yaxis: {
					title: yAxisTitle,
					range: [0, typeData === 'temperature' ? 50 : 255],
					color: '#ffece7',
					gridcolor: '#444',
					tickfont: { color: '#ffece7', family: 'Manrope' }
				},
				plot_bgcolor: 'rgba(0,0,0,0)',
				paper_bgcolor: 'rgba(0,0,0,0)',
				showlegend: false,
				font: { color: '#ffece7', family: 'Manrope' },
				margin: { l: 65, r: 35, t: title ? 50 : 20, b: 65, pad: 10 },
			};

			const config = {displayModeBar: false};

			const temperatureTraces = [{
				x: [],
				y: [],
				mode: 'lines+markers',
				line: {color: lineColor, width: 1.5},
				marker: {color: lineColor, size: 5}
			}];

			const colorTraces = [{
                x: [],
                y: [],
                mode: 'lines+markers',
                line: {color: getComputedStyle(document.documentElement).getPropertyValue('--red'), width: 1.5},
                marker: {color: getComputedStyle(document.documentElement).getPropertyValue('--red'), size: 5}
            },{
                x: [],
                y: [],
                mode: 'lines+markers',
                line: {color: getComputedStyle(document.documentElement).getPropertyValue('--lime'), width: 1.5},
                marker: {color: getComputedStyle(document.documentElement).getPropertyValue('--lime'), size: 5}
            },{
                x: [],
                y: [],
                mode: 'lines+markers',
                line: {color: getComputedStyle(document.documentElement).getPropertyValue('--blue'), width: 1.5},
                marker: {color: getComputedStyle(document.documentElement).getPropertyValue('--blue'), size: 5}
            }];

			Plotly.newPlot(chartContainer, typeData === 'temperature' ? temperatureTraces : colorTraces, layout, config);

			setInterval(async () => {
				try {
					const paramsQuery = new URLSearchParams({sort: 'hora', order: 'DESC', nodes: uniqueId.split('-')[1], limit: '7'});
					const response = await fetch(`/api/retrieveDatabase?${paramsQuery}`);

					if (!response.ok) throw new Error('Database response for PlotlyChart was not ok');

					const responseDB = await response.json();
										
					const timeArray = responseDB.data.toReversed().map((row) => row.hora)

					if (typeData === 'temperature') {
						const updateData = {
                            x: [timeArray],
                            y: [responseDB.data.toReversed().map((row) => row.temperatura)]
                        }

						Plotly.restyle(chartContainer, updateData, [0]);
					} else {
						const updateData = {
							x: [timeArray, timeArray, timeArray],
							y: [responseDB.data.toReversed().map((row) => row.r),
								responseDB.data.toReversed().map((row) => row.g),
								responseDB.data.toReversed().map((row) => row.b)]
						}

						Plotly.restyle(chartContainer, updateData, [0, 1, 2]);
					}

					return;
				} catch (error) {
					console.error('Error fetching data:', error);
				}
			}, 2000);

			window[`getData_${uniqueId.replaceAll('-', '_')}`] = function() {
				return typeData === 'temperature' ? {
					x: chartContainer.data[0].x.at(-1),
					y: chartContainer.data[0].y.at(-1)
				} : {
					x: chartContainer.data[0].x.at(-1),
					y: {r: chartContainer.data[0].y.at(-1),
						g: chartContainer.data[1].y.at(-1),
						b: chartContainer.data[2].y.at(-1)}
				};
			};
		});
	});
</script>