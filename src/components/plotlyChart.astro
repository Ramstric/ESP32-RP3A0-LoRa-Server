---
import "../styles/global.css";

export interface Props {
	chartId: string;
	yAxisTitle?: string;
	lineColor?: string;
	typeData?: 'temperature' | 'color';
}

const {
	chartId,
	yAxisTitle = 'Valor',
	lineColor = '#ffece7',
	typeData = 'temperature',
} = Astro.props;

const uniqueId = chartId;
---

<div id={uniqueId} class="plotly-chart"></div>


<style>
	.plotly-chart {
		width: 100%;
        height: 100%;
	}
</style>

<script define:vars={{ uniqueId, yAxisTitle, lineColor, typeData }} >
	document.addEventListener('DOMContentLoaded', function() {
		import('/ESP32-RP3A0-LoRa-Server/js/plotly.min.js').then(() => {
			const chartContainer = document.getElementById(uniqueId)			

			const layout = {
				xaxis: {
					title: '<b>Tiempo</b>',
					range: [0, 6],
					color: '#ffece7',
					gridcolor: '#444',
					tickfont: { color: '#ffece7', family: 'Manrope' }
				},
				yaxis: {
					title: yAxisTitle,
					range: [0, typeData === 'temperature' ? 50 : 255],
					color: '#ffece7',
					gridcolor: '#444',
					tickfont: { color: '#ffece7', family: 'Manrope' }
				},
				plot_bgcolor: 'rgba(0,0,0,0)',
				paper_bgcolor: 'rgba(0,0,0,0)',
				showlegend: false,
				font: { color: '#ffece7', family: 'Manrope' },
				margin: { l: 65, r: 35, t: 20, b: 65, pad: 10 },
			};

			const config = {displayModeBar: false};
			
			const sampleTimeVales = ['00:00', '01:00', '02:00', '03:00', '04:00', '05:00', '06:00'];
			const sampleTemperatureValues = [19, 20, 22, 24, 26, 28, 30];
			const sampleColorValues = [[30, 35, 100, 108, 98, 40, 35], [29, 30, 30, 28, 29, 80, 100], [80, 75, 33, 32, 30, 30, 28]];

			const temperatureTraces = [{
				x: sampleTimeVales,
				y: sampleTemperatureValues,
				mode: 'lines+markers',
				line: {color: lineColor, width: 1.5},
				marker: {color: lineColor, size: 5}
			}];

			const colorTraces = [{
                x: sampleTimeVales,
                y: sampleColorValues[0],
                mode: 'lines+markers',
                line: {color: getComputedStyle(document.documentElement).getPropertyValue('--red'), width: 1.5},
                marker: {color: getComputedStyle(document.documentElement).getPropertyValue('--red'), size: 5}
            },{
                x: sampleTimeVales,
                y: sampleColorValues[1],
                mode: 'lines+markers',
                line: {color: getComputedStyle(document.documentElement).getPropertyValue('--lime'), width: 1.5},
                marker: {color: getComputedStyle(document.documentElement).getPropertyValue('--lime'), size: 5}
            },{
                x: sampleTimeVales,
                y: sampleColorValues[2],
                mode: 'lines+markers',
                line: {color: getComputedStyle(document.documentElement).getPropertyValue('--blue'), width: 1.5},
                marker: {color: getComputedStyle(document.documentElement).getPropertyValue('--blue'), size: 5}
            }];

			Plotly.newPlot(chartContainer, typeData === 'temperature' ? temperatureTraces : colorTraces, layout, config);

			

			window[`getData_${uniqueId.replaceAll('-', '_')}`] = function() {
				return typeData === 'temperature' ? {
					x: chartContainer.data[0].x.at(-1),
					y: chartContainer.data[0].y.at(-1)
				} : {
					x: chartContainer.data[0].x.at(-1),
					y: {r: chartContainer.data[0].y.at(-1),
						g: chartContainer.data[1].y.at(-1),
						b: chartContainer.data[2].y.at(-1)}
				};
			};
		});
	});
</script>